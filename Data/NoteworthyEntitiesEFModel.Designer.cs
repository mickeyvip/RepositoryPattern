//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("NoteworthyEFModel", "ArticlesTopics", "Articles", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(NoteworthyEFModel.Article), "Topics", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(NoteworthyEFModel.Topic))]

#endregion

namespace NoteworthyEFModel
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class NoteworthyEFEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new NoteworthyEFEntities object using the connection string found in the 'NoteworthyEFEntities' section of the application configuration file.
        /// </summary>
        public NoteworthyEFEntities() : base("name=NoteworthyEFEntities", "NoteworthyEFEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NoteworthyEFEntities object.
        /// </summary>
        public NoteworthyEFEntities(string connectionString) : base(connectionString, "NoteworthyEFEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new NoteworthyEFEntities object.
        /// </summary>
        public NoteworthyEFEntities(EntityConnection connection) : base(connection, "NoteworthyEFEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Article> Articles
        {
            get
            {
                if ((_Articles == null))
                {
                    _Articles = base.CreateObjectSet<Article>("Articles");
                }
                return _Articles;
            }
        }
        private ObjectSet<Article> _Articles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Topic> Topics
        {
            get
            {
                if ((_Topics == null))
                {
                    _Topics = base.CreateObjectSet<Topic>("Topics");
                }
                return _Topics;
            }
        }
        private ObjectSet<Topic> _Topics;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Articles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToArticles(Article article)
        {
            base.AddObject("Articles", article);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Topics EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTopics(Topic topic)
        {
            base.AddObject("Topics", topic);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NoteworthyEFModel", Name="Article")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Article : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Article object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        public static Article CreateArticle(global::System.Int32 id, global::System.String title)
        {
            Article article = new Article();
            article.Id = id;
            article.Title = title;
            return article;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NoteworthyEFModel", "ArticlesTopics", "Topics")]
        public EntityCollection<Topic> Topics
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Topic>("NoteworthyEFModel.ArticlesTopics", "Topics");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Topic>("NoteworthyEFModel.ArticlesTopics", "Topics", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="NoteworthyEFModel", Name="Topic")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Topic : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Topic object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="topicName">Initial value of the TopicName property.</param>
        public static Topic CreateTopic(global::System.Int32 id, global::System.String topicName)
        {
            Topic topic = new Topic();
            topic.Id = id;
            topic.TopicName = topicName;
            return topic;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TopicName
        {
            get
            {
                return _TopicName;
            }
            set
            {
                OnTopicNameChanging(value);
                ReportPropertyChanging("TopicName");
                _TopicName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TopicName");
                OnTopicNameChanged();
            }
        }
        private global::System.String _TopicName;
        partial void OnTopicNameChanging(global::System.String value);
        partial void OnTopicNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("NoteworthyEFModel", "ArticlesTopics", "Articles")]
        public EntityCollection<Article> Articles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Article>("NoteworthyEFModel.ArticlesTopics", "Articles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Article>("NoteworthyEFModel.ArticlesTopics", "Articles", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
